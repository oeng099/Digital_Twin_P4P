/// <reference types="node" />
declare class Capabilities {
    readonly isConnectable: boolean;
    readonly isCentralable: boolean;
    readonly isEncryptable: boolean;
    readonly bindState: number;
    readonly hasIoCapabilities: boolean;
    constructor(data: number);
}
declare class IoCapabilities {
    readonly inputCapabilities: number;
    readonly outputCapabilities: number;
    constructor(data: number);
}
declare class Mesh {
    readonly pbType: number;
    readonly state: number;
    readonly version: number;
    constructor(data: number);
}
declare class Event {
    readonly eventId: number;
    readonly eventData: object;
    constructor(eventId: number, eventData: Buffer);
}
export default class MiPacket {
    readonly isEncrypted: boolean;
    readonly hasMac: boolean;
    readonly hasCapabilities: boolean;
    readonly hasEvent: boolean;
    readonly hasMesh: boolean;
    readonly isRegistered: boolean;
    readonly bindingState: boolean;
    readonly authMode: number;
    readonly version: number;
    readonly productId: number;
    readonly productName: string;
    readonly frameCounter: number;
    readonly mac: Buffer;
    readonly capabilities: Capabilities;
    readonly comboKey: string;
    readonly ioCapabilities: IoCapabilities;
    readonly mesh: Mesh;
    readonly event: Event;
    readonly keyBuffer1: Buffer;
    readonly keyBuffer2: Buffer;
    constructor(data: Buffer | string);
}
export {};
